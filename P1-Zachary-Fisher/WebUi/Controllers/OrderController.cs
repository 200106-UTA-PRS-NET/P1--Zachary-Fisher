using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using WebUi.Models;
using System.Diagnostics;
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using PizzaLib.Models;
using PizzaLib.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;

namespace WebUi.Controllers
{
    public class OrderController:Controller
    {
        public IRepositoryPizza Repo { get; }

        public OrderController(IRepositoryPizza repo) =>
            Repo = repo ?? throw new ArgumentNullException(nameof(repo));
        public IActionResult Index()
        {
            return View();
        }


        public ActionResult Create() => View();

        [HttpPost]
        [ValidateAntiForgeryToken] // this will validate the token generated by the form in server
        // to receive form value we have ModelBinder as a utitlity which will check where from these values are coming
        // Model
        // RouteValues
        // FormCollection
        // QueryString
        // File
        public ActionResult Create(OrderViewModel order, IFormCollection form)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    PizzaLib.Models.Pizza p = new Pizza(order.Preset)
                    {
                        Crust = order.Crust,
                        Size = order.Size,
                    };
                    p.setCost();
                    List<Pizza> a = new List<Pizza>();
                    a.Add(p);
                    PizzaLib.Models.Order o = new Order()
                    {
                        ordertime = DateTime.Now,
                        Uname = User.Identity.Name,
                        Sname= order.StoreName,
                        pizzas = a,
                        Cost=p.Cost
                    };

                    Repo.AddOrder(o);
                    Repo.Save();

                    return RedirectToAction(nameof(Index));
                }
                else
                    return View();
            }
            catch
            {
                return View();
            }
        }

        public ActionResult ViewOrders()
        {
            var orders = Repo.GetOrderbyUser(User.Identity.Name);
            List<OrderViewModel> ovm = new List<OrderViewModel>();
            foreach (var item in orders)
            {
                Pizza p = item.pizzas[0];
                OrderViewModel ord = new OrderViewModel();
                ord.StoreName = item.Sname;
                ord.Purchasetime = item.ordertime;
                ord.Size = p.Size;
                ord.Crust = p.Crust;
                ord.Cost = item.Cost;
                if (p.toppings.Contains("pineapple")) { ord.Preset = "hawaiian"; }
                else if (p.toppings.Contains("green pepper")) { ord.Preset = "supreme"; }
                else if (p.toppings.Contains("pickles")&& p.toppings.Contains("bacon")) { ord.Preset = "bacon cheeseburger"; }
                else if (p.toppings.Contains("pickles")) { ord.Preset = "cheeseburger"; }
                else { ord.Preset = "3 meat"; }
                ovm.Add(ord);
            }
            return View(ovm);
        }





        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
